module SourceCoding.ShannonFano where
	
    import SourceCoding.Histogram
    import Data.List


    shannon_fano_tree :: [(a,Int)] -> Tree a
    shannon_fano_tree [(x,_)]    = Leaf x
    shannon_fano_tree list@(h:t) = Branch (shannon_fano_tree left) (shannon_fano_tree right)
         where (left, right) = split (list) 

    split :: [(a,Int)] -> ([(a,Int)],[(a,Int)])
    split list
         = inner list [] (sum (map (\t -> snd t) list))
         where inner right@(h:t) left delta
                    | abs(delta) <= abs(new_delta) = (left,right)
                    | otherwise    = inner t (left ++ [h]) new_delta
                    where new_delta = delta - 2 * (snd h) 
